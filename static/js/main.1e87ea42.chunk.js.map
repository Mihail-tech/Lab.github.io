{"version":3,"sources":["views/Counter/CounterParent/index.js","views/Counter/index.js","containers/CounterContainer.js","containers/CounterContainerParent.js","App.js","reportWebVitals.js","index.js"],"names":["CounterParent","list","handleCreateCounter","handleRemoveCounter","handleResetCounters","Button","variant","color","onClick","Counter","countValue","handleIncrement","handleDecrement","handleReset","CounterContainer","count","useState","setCountValue","prevCount","useRef","useEffect","current","handleEvenNumber","handleOddNumber","useMemo","CounterContainerParent","setCount","i","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAsCeA,EAjCO,SAAC,GAKhB,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,oBACAC,EAEI,EAFJA,oBACAC,EACI,EADJA,oBAIA,OACE,gCACI,gCACA,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAWN,EAAvD,yBAGA,cAACG,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAaC,QAAWL,EAA1D,4BAGA,cAACE,EAAA,EAAD,CAAQG,QAAWJ,EAAnB,sBAIA,8BACA,6BACI,6BACKH,YCAFQ,EAzBC,SAAC,GAKV,IAJHC,EAIE,EAJFA,WACAC,EAGE,EAHFA,gBACAC,EAEE,EAFFA,gBACAC,EACE,EADFA,YAIF,OACE,gCACK,8BAAM,kBAAoBH,IACnB,cAACL,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAWG,EAAvD,uBAGA,cAACN,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QAAWI,EAAzD,uBAGJ,cAACP,EAAA,EAAD,CAAQG,QAAWK,EAAnB,uBC6CGC,EA7DU,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1B,EAAoCC,mBAAS,GAA7C,mBAAON,EAAP,KAAmBO,EAAnB,KAEMC,EAAYC,iBAAOJ,GAEzBK,qBAAU,WACJL,EAAQG,EAAUG,SACpBC,IAEEP,EAAQG,EAAUG,SACpBE,MAED,CAACR,IAEJ,IAAMJ,EAAkB,WACtBM,EAAcP,EAAa,IAGvBE,EAAkB,WACtBK,EAAcP,EAAa,IAGvBG,EAAc,WAClBI,EAAc,IAGVK,EAAmB,WACnBZ,EAAa,IAAM,GACrBC,KAIEY,EAAkB,WAClBb,EAAa,IAAM,GACrBE,KAgBJ,OAZiBY,mBACf,kBACE,cAAC,EAAD,CACEb,gBAAmBA,EACnBC,gBAAmBA,EACnBC,YAAeA,EACfH,WAAcA,MAGlB,CAACA,KCJUe,EAzCgB,WAkB7B,IAjBA,MAA0BT,mBAAS,GAAnC,mBAAOD,EAAP,KAAcW,EAAd,KAgBMzB,EAAO,GACJ0B,EAAI,EAAGA,EAAIZ,EAAOY,IACzB1B,EAAK2B,KACH,cAAC,EAAD,CAAkBb,MAASA,GAAcY,IAI7C,OACE,cAAC,EAAD,CACE1B,KAAQA,EACRC,oBApBwB,WAC1BwB,EAASX,EAAQ,IAoBfZ,oBAjBwB,WAC1B,GAAIY,EAAQ,EACR,OAAOW,EAASX,EAAQ,IAgB1BX,oBA1BwB,WAC1BsB,EAAS,OCFEG,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1e87ea42.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\n\r\nconst CounterParent = ({\r\n  list,\r\n  handleCreateCounter,\r\n  handleRemoveCounter,\r\n  handleResetCounters,\r\n}) => {\r\n  \r\n\r\n  return (\r\n    <div>\r\n        <div>\r\n        <Button variant=\"contained\" color=\"primary\" onClick = {handleCreateCounter}>\r\n        add counter\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"secondary\"  onClick = {handleRemoveCounter}>\r\n            delete counter\r\n        </Button>                 \r\n        <Button onClick = {handleResetCounters}>\r\n            Reset\r\n        </Button>\r\n        </div>\r\n        <div>\r\n        <ul>\r\n            <li>\r\n                {list}\r\n            </li>\r\n        </ul>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default CounterParent;\r\n  \r\n\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nconst Counter = ({\r\n    countValue,\r\n    handleIncrement,\r\n    handleDecrement,\r\n    handleReset,\r\n}) => {\r\n  \r\n\r\n  return (\r\n    <div>\r\n         <div>{\"Current value: \" + countValue}</div>\r\n                <Button variant=\"contained\" color=\"primary\" onClick = {handleIncrement}>\r\n                increment\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick = {handleDecrement}>\r\n                decrement\r\n                </Button>\r\n            <Button onClick = {handleReset}>\r\n                Reset\r\n            </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Counter;","/* eslint-disable */\r\nimport React, { useState, useRef, useEffect, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Counter from \"../views/Counter/index\";\r\n\r\nconst CounterContainer = ({ count }) => {\r\n  const [countValue, setCountValue] = useState(0)\r\n\r\n  const prevCount = useRef(count)\r\n\r\n  useEffect(() => {\r\n    if (count > prevCount.current) {\r\n      handleEvenNumber()\r\n    }\r\n    if (count < prevCount.current) {\r\n      handleOddNumber()\r\n    }\r\n  }, [count])\r\n\r\n  const handleIncrement = () => {\r\n    setCountValue(countValue + 1);\r\n  }\r\n\r\n  const handleDecrement = () => {\r\n    setCountValue(countValue - 1)\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setCountValue(0)\r\n  }\r\n\r\n  const handleEvenNumber = () => {\r\n    if (countValue % 2 === 0) {\r\n      handleIncrement()\r\n    }\r\n  }\r\n\r\n  const handleOddNumber = () => {\r\n    if (countValue % 2 !== 0) {\r\n      handleDecrement()\r\n    }\r\n  }\r\n\r\n  const memorize = useMemo(\r\n    () => (\r\n      <Counter\r\n        handleIncrement = {handleIncrement}\r\n        handleDecrement = {handleDecrement}\r\n        handleReset = {handleReset}\r\n        countValue = {countValue}\r\n      />\r\n    ),\r\n    [countValue],\r\n  )\r\n\r\n  return memorize\r\n};\r\n\r\nCounterContainer.propTypes = {\r\n  count: PropTypes.number,\r\n  counterValue: PropTypes.number,\r\n  handleIncrement: PropTypes.func,\r\n  handleDecrement: PropTypes.func,\r\n  handleReset: PropTypes.func\r\n};\r\n\r\nexport default CounterContainer;\r\n\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport  PropTypes  from 'prop-types';\r\nimport CounterParent from \"../views/Counter/CounterParent/index\";\r\nimport CounterContainer from \"../containers/CounterContainer\";\r\n\r\n\r\n\r\nconst CounterContainerParent = () => {\r\n  const [count, setCount] = useState(1);\r\n\r\n  const handleResetCounters = () => {\r\n    setCount(1)\r\n  }\r\n\r\n  const handleCreateCounter = () => {\r\n    setCount(count + 1)\r\n  }\r\n\r\n  const handleRemoveCounter = () => {\r\n    if (count > 1) {\r\n        return setCount(count - 1)\r\n    }\r\n  }\r\n\r\n  const list = [];\r\n  for (let i = 0; i < count; i++) {\r\n    list.push(\r\n      <CounterContainer count = {count} key = {i} />,\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CounterParent\r\n      list = {list}\r\n      handleCreateCounter = {handleCreateCounter}\r\n      handleRemoveCounter = {handleRemoveCounter}\r\n      handleResetCounters = {handleResetCounters}\r\n    />\r\n  );\r\n};\r\n\r\nCounterContainerParent.propTypes = {\r\n    list: PropTypes.array,\r\n    handleCreateCounter: PropTypes.func,\r\n    handleRemoveCounter: PropTypes.func,\r\n    handleResetCounters: PropTypes.func\r\n}\r\n\r\nexport default CounterContainerParent;","import './App.css';\nimport CounterContainerParent from './containers/CounterContainerParent';\n\nfunction App() {\n  return (\n    <CounterContainerParent />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}